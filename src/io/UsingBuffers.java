package io;

import java.nio.ByteBuffer;
import java.nio.CharBuffer;

/**
 *  Подробнее о буферах
 *  <p>
 *  После вызова метода symmetricScramble() позиция (pos) указывает на первый элемент буфера, вместительность (cap) и
 *  предел (lim) — на последний. В методе symmetricScramble() цикл while выполняется до тех пор, пока позиция не станет
 *  равной пределу. Позиция буфера изменяется при вызове для него «относительных» методов put() или get().
 *  <p>
 *  Когда управление переходит в цикл while, вызывается метод mark() для установки значения метки (шаг).
 *  Состояние буфера в этот момент таково: pos и mark указывают на 0 элемент буфера.
 *  <p>
 *  Два вызова «относительных» методов get() сохраняют значение первых двух символов в переменных c1 и c2. После этих
 *  вызовов буфер выглядит так: mar указывает на 0 элемент буфера, а pos на 3.
 *  <p>
 *  Для смешивания символов нам нужно записать символ c2 в позицию 0, а c1 в позицию 1. Для этого можно воспользоваться
 *  «абсолютной» версией метода put(), но мы приравняем позицию метке, что и делает метод reset(): теперь pos указывает
 *  на 0 элемент.
 *  <p>
 *  Два вызова метода put() записывают c2, а затем c1: теперь pos указывает на 3 элемент.
 *  <p>
 *  На следующей итерации значение метки приравнивается позиции: теперь mark так же указывает на 3 элемент.
 *  <p>
 *  Этот процесс продолжается до тех пор, пока не будет просмотрен весь буфер. В конце цикла while позиция находится в
 *  конце буфера. При выводе буфера на печать распечатываются только символы, находящиеся между позицией и пределом.
 *  Поэтому, если вы хотите вывести буфер целиком, придется установить позицию на начало буфера, используя для этого
 *  метод rewind(). Вот в каком состоянии находится буфер после вызова метода rewind() (значение метки стало неопределенным).
 */
public class UsingBuffers {
    private static void symmetricScramble(CharBuffer buffer) {
        while(buffer.hasRemaining()) {
            buffer.mark();
            char c1 = buffer.get();
            char c2 = buffer.get();
            buffer.reset();
            buffer.put(c2).put(c1);
        }
    }

    public static void main(String[] args){
        char[] data = "UsingBuffers".toCharArray();
        ByteBuffer bb = ByteBuffer.allocate(data.length * 2);
        CharBuffer cb = bb.asCharBuffer();
        cb.put(data);
        System.out.println(cb.rewind());
        symmetricScramble(cb);
        System.out.println(cb.rewind());
        symmetricScramble(cb);
        System.out.println(cb.rewind());
    }
}