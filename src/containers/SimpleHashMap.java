package containers;

import java.util.*;

/**
 *  Хеширование ради скорости
 *  <p>
 *  Проблема кроется в процессе поиска ключа: ключи находятся в неупорядоченном состоянии, с ними приходится использовать простой линейный поиск,
 *  а неповоротливее процесса на свете просто не существует.
 *  «Изюминка» хеширования — именно скорость: хеширование позволяет провести поиск весьма оперативно. Так как «узким местом» является поиск ключа,
 *  одним из решений этой задачи могло бы стать поддержание всех ключей в упорядоченном виде.
 *  По сути, при хешировании необходимо всего лишь хранить ключи где-то, где их можно потом быстро найти. Как вы не раз могли убедиться, самая быстрая
 *  структура для хранения группы элементов — массив, поэтому он и используется для хранения информации о ключах (обязательно отметьте, что я сказал
 *  «информации о ключах», а не о «ключах» самих по себе). В этой же главе мы убедились, что массивы, после их создания и выделения хранилища, больше
 *  не меняют свой размер, поэтому возникает новая проблема: в карте (мар) мы хотели бы содержать неограниченное количество значений, однако число ключей
 *  ограничено размером массива.
 *  В массиве не будут храниться ключи. По объекту-ключу будет строиться число, которое будет использоваться для индексирования массива. Это число — хеш-код
 *  (hash code) — возвращается методом hashCode() (в компьютерных терминах такой метод называется хеш-функцией), который определен в классе Object и,
 *  предположительно, переопределен вашим классом. Для решения проблемы с потенциально недостаточным размером массива разрешается соотносить один индекс
 *  массива с несколькими ключами, то есть не исключены коллизии. Из-за этого неважно, насколько вместителен массив — каждый ключ сможет найти в нем для
 *  себя подходящее место.
 *  Таким образом, процесс поиска значения начинается с вычисления хеш-кода и поиска его в массиве. Если бы вы могли гарантировать, что «накладок» в массиве
 *  нет (что могло бы случиться, будь у вас ограниченное количество хранимых элементов), то получилась бы идеальная хеш-функция, но это уже особый случай.
 *  Во всех других случаях с коллизиями справляется внешнее связывание: элемент массива содержит не конкретное значение, но указывает на цепочку значений.
 *  В этой цепочке обнаружение
 *  производится с помощью обычного линейного алгоритма, с помощью метода equals (). Конечно, эта часть поиска гораздо медленнее, но если хеш-функция работает
 *  хорошо, на каждую ячейку массива придется максимум два-три значения. Поэтому вместо поиска в списке всех ключей вы быстро переходите к нужной позиции, где
 *  остается сравнить несколько вхождений для выявления искомого значения. Это гораздо эффективнее, и именно потому таблица HashMap такая быстрая.
 */
public class SimpleHashMap<K,V> extends AbstractMap<K,V> {
    // В качестве размера хеш-таблицы следует выбирать
    // простое число, чтобы обеспечить равномерность распределения:
    static final int SIZE = 997;
    // Физический массив обобщений создать нельзя, но можно
    // прийти к нему через восходящее преобразование:
    @SuppressWarnings("unchecked")
    LinkedList<MapEntry<K,V>>[] buckets = new LinkedList[SIZE];
    public V put(K key, V value) {
        V oldValue = null;
        int index = Math.abs(key.hashCode()) % SIZE;
        if(buckets[index] == null)
            buckets[index] = new LinkedList<MapEntry<K,V>>();
        LinkedList<MapEntry<K,V>> bucket = buckets[index];
        MapEntry<K,V> pair = new MapEntry<K,V>(key, value);
        boolean found = false;
        ListIterator<MapEntry<K,V>> it = bucket.listIterator();
        while(it.hasNext()) {
            MapEntry<K,V> iPair = it.next();
            if(iPair.getKey().equals(key)) {
                oldValue = iPair.getValue();
                it.set(pair); // Заменяем старое значение новым
                found = true;
                break;
            }
        }
        if(!found)
            buckets[index].add(pair);
        return oldValue;
    }
    public V get(Object key) {
        int index = Math.abs(key.hashCode()) % SIZE;
        if (buckets[index] == null) return null;
        for (MapEntry<K, V> iPair : buckets[index])
            if (iPair.getKey().equals(key))
                return iPair.getValue();
        return null;
    }
    public Set<Entry<K,V>> entrySet() {
        Set<Map.Entry<K,V>> set = new HashSet<Map.Entry<K,V>>();
        for(LinkedList<MapEntry<K,V>> bucket : buckets) {
            if (bucket == null) continue;
            for (MapEntry<K, V> mpair : bucket)
                set.add(mpair);
        }
        return set;
    }

    public static void main (String[]args) {
        SimpleHashMap<String, String> m = new SimpleHashMap<String, String>();
        m.putAll(Countries.capitals(25));
        System.out.println(m);
        System.out.println(m.get("ERITREA"));
        System.out.println(m.entrySet());
    }
}