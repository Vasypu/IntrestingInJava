package containers;

/**
 *  Опасности микротестов
 *  <p>
 *  При написании так называемых микротестов необходимо действовать внимательно, не делать слишком много предположений
 *  и по возможности сузить тесты, чтобы в них действительно измерялись только интересующие вас операции.
 *  <p>
 *  Пример с методом Math.random(). Он выдает значения от нуля до единицы — но включаются ли границы в набор допустимых
 *  значений? Иначе говоря, как должен обозначаться диапазон в системе математических обозначений — (0,1), [0,1], (0,1]
 *  или [0,1).
 *  <p>
 *  Программа запускается командой
 *  java RandomBounds lower
 *  или
 *  java RandomBounds upper
 *  В обоих случаях выполнение программы приходится прерывать вручную, так что на первый взгляд Math.random() не генерирует
 *  значения 0.0 или 1.0. Однако такой эксперимент обманчив. Если учесть, что от 0 до 1 находится около 262 разных значений
 *  типа double, время экспериментального ожидания одного конкретного значения может превысить срок жизни компьютера (и даже
 *  экспериментатора). На самом деле значение 0.0 включается в результаты Math, random(), так что на математическом языке
 *  диапазон должен обозначаться [0,1). Будьте осмотрительны при анализе экспериментов и старайтесь разобраться в их ограничениях.
 */
public class RandomBounds {
    static void usage() {
        System.out.println("Usage:");
        System.out.println("\tRandomBounds lower");
        System.out.println("\tRandomBounds upper");
        System.exit(1);
    }
    public static void main(String[] args) {
        if(args.length != 1) usage();
        if(args[0].equals("lower")) {
            while (Math.random() != 0.0)
                ; // Продолжать попытки
            System.out.println("Produced 0.0!");
        }
        else if(args[0].equals("upper")) {
            while (Math.random() != 1.0)
                ; // Продолжать попытки
            System.out.println("Produced 1.0!");
        }
        else
            usage();
    }
}
